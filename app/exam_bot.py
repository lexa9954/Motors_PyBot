import threading
import time
import keyboards_exam
from datetime import datetime

from datetime import datetime


import cfg
from pyexpat.errors import messages
from telebot import TeleBot

from auth import auth, users  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º auth –∏ users

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ cfg
bot = TeleBot(cfg.BOT_TOKEN_EXAM, parse_mode='HTML')
url = cfg.URL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in users or users[user_id]['status'] == 'offline':
        ask_for_tabel_number(message)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = users[user_id].get('role', 'user')

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user_role == 'admin':
        reply_markup = keyboards_exam.kb_admin_menu()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    else:
        reply_markup = keyboards_exam.kb_user_menu()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.text == '–ù–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é ‚ùó':
        show_overdue(message)
    elif message.text == '–ü–æ–¥–ª–µ–∂–∞—â–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ ‚è≥':
        show_submit_list(message)
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏"
def show_overdue(message):
    bot.send_message(message.chat.id, '–í—ã–±–æ—Ä —ç–∫–∑–∞–º–µ–Ω–∞', reply_markup=keyboards_exam.kb_select_exam(), parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å"
def show_submit_list(message):
    bot.send_message(message.chat.id, "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å...")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
def ask_for_tabel_number(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∂–¥–µ–º –≤–≤–æ–¥–∞ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    mesg = bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à–∞–≥ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    bot.register_next_step_handler(mesg, handle_tabel_number)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
def handle_tabel_number(message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ auth()
    result = auth(message)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ auth, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

    # –ï—Å–ª–∏ –≤ result –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if 'info' in result:
        bot.send_message(message.chat.id, result['info'], reply_markup=keyboards_exam.kb_main_menu_user(), parse_mode='HTML')

def check_user_exam(id_1, id_2):
    query = f'''SELECT 
    peoples.id AS people_id,
    COALESCE(org_structure_groups.group_name, '–ù–µ —É–∫–∞–∑–∞–Ω–æ') AS group_name,
    COALESCE(org_structure_positions.position_name, '–ù–µ —É–∫–∞–∑–∞–Ω–∞') AS position_name,
    COALESCE(org_structure_positions.id, 0) AS position_id,
    COALESCE(elect_group, 0) AS elect_group,
    COALESCE(log_auth_var.chat_id, 0) AS chat_id,
    COALESCE(Exam_date.Protocol_num, '–ù–µ —É–∫–∞–∑–∞–Ω') AS Protocol_num,
    COALESCE(peoples.first_name, '–ë–µ–∑ –∏–º–µ–Ω–∏') AS first_name,
    COALESCE(peoples.last_name, '–ë–µ–∑ —Ñ–∞–º–∏–ª–∏–∏') AS last_name,
    COALESCE(peoples.second_name, '-') AS second_name,
    Exam_typeQuest.Type_quest_text AS Type_quest_text,
    COALESCE(Exam_date.type_quest_id, 0) AS type_quest_id,
    COALESCE(Exam_date.success_quest_percent, 0) AS success_quest_percent,
    COALESCE(Exam_date.last_date, '1900-01-01') AS last_date,
    Exam_date.time_exam,
    peoples.TabNumberSap,
    CASE
        WHEN Exam_date.success_quest_percent < 70 THEN '–ù–µ —Å–¥–∞–ª —ç–∫–∑–∞–º–µ–Ω'
        WHEN CURDATE() > DATE_ADD(Exam_date.last_date, INTERVAL 1 YEAR) THEN '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'
        WHEN CURDATE() BETWEEN DATE_ADD(DATE(last_date), INTERVAL 1 YEAR) - INTERVAL 14 DAY AND DATE_ADD(DATE(last_date), INTERVAL 1 YEAR) THEN '–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å'
        WHEN DATE(last_date) < CURDATE() - INTERVAL 11 MONTH THEN '–û—Å—Ç–∞–ª—Å—è –º–µ—Å—è—Ü –∏–ª–∏ –º–µ–Ω—å—à–µ'
        ELSE '–£—Å–ø–µ—à–Ω–æ'
    END AS exam_status,
    COALESCE(org_structure.org_structure_id, 0) AS org_structure_id
FROM 
    Exam_date
JOIN 
    peoples ON peoples.id = Exam_date.people_id
JOIN 
    Exam_typeQuest ON Exam_typeQuest.id = Exam_date.type_quest_id
LEFT JOIN 
    org_structure ON org_structure.id = peoples.str_org_structure
LEFT JOIN 
    org_structure_positions ON org_structure_positions.id = org_structure.str_pos_id
LEFT JOIN 
    org_structure_groups ON org_structure_groups.id = org_structure.str_group_id
LEFT JOIN 
    log_auth_var ON log_auth_var.id_people = peoples.id
WHERE 
    Exam_date.last_date = (
        SELECT MAX(Exam_date2.last_date)
        FROM Exam_date AS Exam_date2
        WHERE Exam_date2.people_id = peoples.id
        AND Exam_date2.type_quest_id = Exam_date.type_quest_id
    )
    AND peoples.status_id = 0
    AND (org_structure.org_structure_id = {id_1} OR org_structure.org_structure_id = {id_2})
    AND Exam_date.notify_check = 1
    
    AND (
        Exam_date.success_quest_percent < 70
        OR CURDATE() > DATE_ADD(Exam_date.last_date, INTERVAL 1 YEAR)
        OR DATE(last_date) < CURDATE() - INTERVAL 11 MONTH
    )
ORDER BY 
    Exam_date.last_date DESC;
'''

    try:
        users_exam = cfg.execute_query(url+query, 18)
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:")
        #print(users_exam)
        if not users_exam:
            print("–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return users_exam
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", e)
        return ''

def format_date(date_str,fail):
    from datetime import datetime

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
    date_obj = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
    date_obj_plus_one_year = date_obj
    if fail !=True:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º 1 –≥–æ–¥
            date_obj_plus_one_year = date_obj.replace(year=date_obj.year + 1)
        except ValueError:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ 29 —Ñ–µ–≤—Ä–∞–ª—è (–≤–∏—Å–æ–∫–æ—Å–Ω—ã–π –≥–æ–¥), –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∞ 28 —Ñ–µ–≤—Ä–∞–ª—è
            date_obj_plus_one_year = date_obj.replace(year=date_obj.year + 1, day=28)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–∞—Ç—ã (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)
    return date_obj_plus_one_year.strftime("%d.%m.%Y")  # –ü—Ä–∏–º–µ—Ä: "13.12.2025"


def get_fails_message(id_1, id_2):
    exam_fails = check_user_exam(id_1, id_2)
    if exam_fails:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        header = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–¥–∞—á—É —ç–∫–∑–∞–º–µ–Ω–æ–≤:\n\n"

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã
        overdue_table = "<b>‚ùó –ù–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é:</b>\n<pre>"
        overdue_table += f"{'–§–ò–û':<20} | {'–î–∞—Ç–∞':<10} | {'–≠–∫–∑–∞–º–µ–Ω':<25}\n"
        overdue_table += f"{'-' * 20} | {'-' * 10} | {'-' * 25}\n"

        soon_expire_table = "<b>‚ö†Ô∏è –ü–æ–¥–ª–µ–∂–∞—â–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:</b>\n<pre>"
        soon_expire_table += f"{'–§–ò–û':<20} | {'–î–∞—Ç–∞':<10} | {'–≠–∫–∑–∞–º–µ–Ω':<25}\n"
        soon_expire_table += f"{'-' * 20} | {'-' * 10} | {'-' * 25}\n"

        for fail in exam_fails:
            # –§–æ—Ä–º–∞—Ç –§–ò–û: "–§–∞–º–∏–ª–∏—è –ò.–û."
            fio = f"{fail[8]} {fail[7][0]}.{fail[9][0]}."
            if len(fio) > 20:  # –£—Ä–µ–∑–∞–µ–º –§–ò–û, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                fio = fio[:17] + "..."

            success_percent = float(fail[12])

            if success_percent >= 70:
                date = format_date(fail[13], False)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            else:
                date = format_date(fail[13], True)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º 1 –≥–æ–¥

            exam_name = fail[10]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫–∑–∞–º–µ–Ω–∞ –∏–∑ fail[10]

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω—É–∂–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if fail[16] == '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ':
                overdue_table += f"{fio:<15} | {date:<10} | {exam_name:<20}\n"
            elif fail[16] == '–û—Å—Ç–∞–ª—Å—è –º–µ—Å—è—Ü –∏–ª–∏ –º–µ–Ω—å—à–µ':
                soon_expire_table += f"{fio:<15} | {date:<10} | {exam_name:<20}\n"
            elif fail[16] == '–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å':
                soon_expire_table += f"{fio:<15} | {date:<10} | {exam_name:<20}\n"

        overdue_table += "</pre>\n\n" if "–§–ò–û" not in overdue_table else "</pre>"
        soon_expire_table += "</pre>" if "–§–ò–û" not in soon_expire_table else "</pre>"

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return header + overdue_table + soon_expire_table
    else:
        return None



# –û–ü–û–í–ï–©–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –û –°–î–ê–ß–ò –≠–ö–ó–ê–ú–ï–ù–ê
def notify_auto_check():
    while True:
        user_list = cfg.notify_exam()
        print(user_list)
        for user in user_list:
            try:
                user_id = user[0]
                chat_id = user[5]
                exam_name = user[4]
                type_quest_id = user[6]
                bot.send_message(chat_id, text=f'''–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –î–æ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –ø–æ —ç–∫–∑–∞–º–µ–Ω—É "{exam_name}" 
                                                   –æ—Å—Ç–∞–ª—Å—è 1 –º–µ—Å—è—Ü!''', reply_markup = keyboards_exam.exam_done())
                print(f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[1]} {user[2]} –æ–± —ç–∫–∑–∞–º–µ–Ω–µ {exam_name}')
            except Exception as e:
                print(
                    f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} "
                    f"ERROR: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} {user[2]} –Ω–µ –æ–ø–æ–≤–µ—â—ë–Ω. –û—à–∏–±–∫–∞: {e}")
                continue

        user_list2 = cfg.notify_exam_2weeks()
        for user in user_list2:
            try:
                user_id = user[0]
                chat_id = user[5]
                exam_name = user[4]
                type_quest_id = user[6]
                bot.send_message(chat_id, text=f'''–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω "{exam_name}"! 
                                                   –¥–æ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å!''', reply_markup = keyboards_exam.exam_done())
                print(f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[1]} {user[2]} –æ–± —ç–∫–∑–∞–º–µ–Ω–µ {exam_name}')
            except Exception as e:
                print(
                    f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} "
                    f"ERROR: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[1]} {user[2]} –Ω–µ –æ–ø–æ–≤–µ—â—ë–Ω. –û—à–∏–±–∫–∞: {e}")
                continue

# –û–ü–û–í–ï–©–ï–ù–ò–ï –ú–ê–°–¢–ï–†–û–í –≠–õ–ï–ö–¢–†–û–°–õ–£–ñ–ë–´
        admin_list = cfg.get_auto_master() + cfg.get_elec_master()
        for admin in admin_list:
            try:
                msg = get_fails_message(admin[3], admin[3]) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º org_structure_id –º–∞—Å—Ç–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏ –∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–æ–≤
                if msg: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    bot.send_message(admin[2], text=msg, parse_mode="HTML")
                    print(f"–£–≤–µ–¥–æ–º–æ–º–∏–ª –≤ TG –∞–¥–º–∏–Ω–∞ {admin[0]} {admin[1]}")
                elif msg == None: 
                    print('‚úÖ –í—Å–µ —ç–∫–∑–∞–º–µ–Ω—ã —Å–¥–∞–Ω—ã –≤–æ–≤—Ä–µ–º—è!')
            except Exception as e:
                    print(
                        f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} "
                        f"ERROR: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin[0]} {admin[1]} –Ω–µ –æ–ø–æ–≤–µ—â—ë–Ω. –û—à–∏–±–∫–∞: {e}")
                    continue

# –û–ü–û–í–ï–©–ï–ù–ò–ï –ù–ê–ß–ê–õ–¨–ù–ò–ö–ê –£–ß–ê–°–¢–ö–ê –≠–õ–ï–ö–¢–†–û–°–õ–£–ñ–ë–´
        boss = cfg.get_electro_boss()  # ID –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞
        id_1 = admin_list[0][3]  # id –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        id_2 = admin_list[1][3]  # id –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        msg = get_fails_message(id_1, id_2) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º org_structure_id –º–∞—Å—Ç–µ—Ä–æ–≤
        try:
            if msg: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö
                bot.send_message(boss[0][2], text=msg, parse_mode="HTML")
                print(f"–£–≤–µ–¥–æ–º–æ–º–∏–ª –≤ TG –∞–¥–º–∏–Ω–∞ {boss[0][0]} {boss[0][1]}")
            elif msg == None: 
                print('‚úÖ –í—Å–µ —ç–∫–∑–∞–º–µ–Ω—ã —Å–¥–∞–Ω—ã –≤–æ–≤—Ä–µ–º—è!')
        except Exception as e:
                print(
                    f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} "
                    f"ERROR: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin[0]} {admin[1]} –Ω–µ –æ–ø–æ–≤–µ—â—ë–Ω. –û—à–∏–±–∫–∞: {e}")
                continue

        time.sleep(60)


@bot.callback_query_handler(func = lambda call: True)
def exam_done_bt(call, people_id, type_quest_id):
    id = people_id
    type_quest = type_quest_id
    if call.data == 'exam_done':
        cfg.off_notify_exam(id, type_quest)
        cfg.new_notify_exam(id, type_quest)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run_bot():
    print("–ë–û–¢ –≠–ö–ó–ê–ú–ï–ù –ù–ê–ß–ê–õ –†–ê–ë–û–¢–£.....")
    try:
        _thread_notify_check = threading.Thread(target=notify_auto_check)
        _thread_notify_check.start()
        bot.infinity_polling()  # –ó–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –±–µ–∑ –ø–æ—Ç–æ–∫–æ–≤
        _thread_notify_check.join()
    except KeyboardInterrupt:
        print("–ë–û–¢ –≠–ö–ó–ê–ú–ï–ù –û–°–¢–ê–ù–û–í–õ–ï–ù")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞
if __name__ == '__main__':
    run_bot()