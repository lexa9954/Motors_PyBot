from telebot import types
import cfg
import keyboards
from os import path
import threading
import time
from datetime import datetime, timedelta
import re


bot = cfg.telebot.TeleBot(cfg.BOT_TOKEN, parse_mode='HTML')

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∏–º —Å—Ç–∞—Ç—É—Å–∞ "–û–Ω–ª–∞–π–Ω" –∏–ª–∏ "–û—Ñ—Ñ–ª–∞–π–Ω"
# {tabel : { status : offline }, ...}
users = {}
for i in cfg.get_auth_tabel():
    key = f'{i[1]}'
    users[key] = {'status':'offline', 'last_activity_time': datetime.now().strftime("%H:%M:%S")}

inactive_timeout = timedelta(minutes=60)


#  """–†–ê–ë–û–¢–ê –ë–û–¢–ê –ü–†–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ò –ö–û–ú–ê–ù–î–´ /start"""
@bot.message_handler(commands=['start'])
def start(message):
    mesg = bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")
    bot.register_next_step_handler(mesg, auth)


# """–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"""
@bot.message_handler(content_types=['text'])
def auth(message):
    chat_id = str(message.chat.id)
    if chat_id not in users:
        users[str(message.chat.id)] = {'status':'offline', 'last_activity_time': datetime.now().strftime("%H:%M:%S")}
        print(
            f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id - {str(message.chat.id)}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ users (–Ω–µ –∏–∑ log_auth_var)")

    else:
        pass
    
    for id in users:
        if chat_id == id:
            if users[id]['status'] == 'offline':
                if message.text.isdigit():
                    tabel = message.text
                    user = cfg.select_user(tabel)
                    if user[0].startswith('<br') or user is None: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ log_auth_var
                        if cfg.check_user_true(tabel):
                            cfg.sign_up(chat_id, tabel)
                            auth(message)
                            try:
                                bot.send_message(message.chat.id, text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{user[0]}!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup=keyboards.kb_main_menu())
                            except cfg.telebot.apihelper.ApiTelegramException as e:
                                pass
                            users[id]['status'] = 'online' # –ó–∞–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–æ–Ω–ª–∞–π–Ω"
                            print(
                                f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {' '.join(user)}")

                            break
                        else:
                            bot.send_message(message.chat.id, text='–¢–∞–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –Ω–µ—Ç –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É')
                    elif user[2] == '': # –ï—Å–ª–∏ chat_id –ø—É—Å—Ç–æ–π
                        if cfg.check_chat_id(chat_id) == False:
                            cfg.add_chat_id(message.chat.id, tabel)
                            bot.send_message(message.chat.id,text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{user[0]}!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup = keyboards.kb_main_menu())
                            users[id]['status'] = 'online'
                            print(
                                f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {' '.join(user)}")

                            break
                        else: bot.send_message(message.chat.id, text=f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –ø—Ä–∏—Ç–≤–æ—Ä—è—Ç—å—Å—è!')
                    else:
                        if user[2] == id:
                            bot.send_message(message.chat.id,text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{user[0]}!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup = keyboards.kb_main_menu())
                            users[id]['status'] = 'online'
                            print(
                                f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({' | '.join(user)})")
                            break
                        else:
                            bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä!')
                else:
                    bot.send_message(message.chat.id, text='–¢–∞–±. –Ω–æ–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!')
            else:
                menu_builder(message)
    
    update_user_activity(str(message.chat.id))


#  """–ü–û–°–¢–†–û–ï–ù–ò–ï –ú–ï–ù–Æ –ü–û–°–õ–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"""
def menu_builder(message):
    for id in users:
        if str(message.chat.id) == id:
            if users[id]['status'] == 'online':
                if message.text == 'üîç –ü–æ–∏—Å–∫ —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—è':
                    bot.send_message(message.chat.id, text='–ü–æ –∫–∞–∫–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é?', reply_markup = keyboards.search_criteria())

                elif message.text == 'üåê –û–±–∑–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π':
                    bot.send_message(message.chat.id, text='–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.')

                elif message.text == '–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω–æ–º—É –Ω–æ–º–µ—Ä—É':
                    msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–≤–∏–≥–∞—Ç–µ–ª—è.', reply_markup = keyboards.btn_back())
                    bot.register_next_step_handler(msg, find_by_number)

                elif message.text == '–ü–æ–∏—Å–∫ –ø–æ –º–æ—â–Ω–æ—Å—Ç–∏':
                    msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –º–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç).', reply_markup = keyboards.btn_back())
                    bot.register_next_step_handler(msg, find_by_power_first_step)

                elif message.text == 'üîô –ù–∞–∑–∞–¥':
                    bot.send_message(message.chat.id, text='–ù–∞–∑–∞–¥', reply_markup = keyboards.kb_main_menu())

                else: 
                    bot.send_message(message.chat.id, text='–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.')


#  """–§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –ü–û –ò–ù–í–ï–ù–¢–ê–†–ù–û–ú–£ –ù–û–ú–ï–†–£ –î–í–ò–ì–ê–¢–ï–õ–Ø"""
def find_by_number(message):
    inv_num = message.text
    if inv_num.isdigit():
        vehicle = cfg.get_vehicle_by_number(inv_num)
        if len(vehicle[0][0]) < 100 or vehicle is not None: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ë–î
            bot.send_photo(message.chat.id, 
                            #photo = open(f'{path.join(path.dirname(__file__), f'{cfg.get_image(vehicle[5])}')}', 'rb'), caption=f'<b>–ò–Ω–≤. ‚Ññ: <u> F-{vehicle[0]} </u>\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <u> {vehicle[1]} </u>\n–ú–æ—â–Ω–æ—Å—Ç—å: <u> {vehicle[2]}–∫–í—Ç </u>\n–í–æ–ª—å—Ç–∞–∂: <u> {vehicle[3]}–í </u>\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <u> {vehicle[4]} </u>\n–°—Ç–∞—Ç—É—Å: <u> {vehicle[5]} </u></b>',
                           # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
                           photo=open(f'{cfg.get_image(vehicle[5])}', 'rb'),
                           # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                           caption=f"<b>–ò–Ω–≤. ‚Ññ: <u> F-{vehicle[0]} </u>\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <u> {vehicle[1]} </u>\n–ú–æ—â–Ω–æ—Å—Ç—å: <u> {vehicle[2]}–∫–í—Ç </u>\n–í–æ–ª—å—Ç–∞–∂: <u> {vehicle[3]}–í </u>\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <u> {vehicle[4]} </u>\n–°—Ç–∞—Ç—É—Å: <u> {vehicle[5]} </u></b>",

                           reply_markup=keyboards.ikb_vehicle())
            bot.send_message(message.chat.id, text='–û—Ç–ª–∏—á–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup = keyboards.search_criteria())
        else: 
            msg = bot.send_message(message.chat.id, text='–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è. –ú–æ–∂–µ—Ç –≤—ã –æ—à–∏–±–ª–∏—Å—å?\n–ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑.')
            bot.register_next_step_handler(msg, find_by_number)
    else:
        if message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, text='–ù–∞–∑–∞–¥', reply_markup = keyboards.kb_main_menu())
        else:
            msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
            bot.register_next_step_handler(msg, find_by_number)


#  """–§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê –î–í–ò–ì–ê–¢–ï–õ–ï–ô –ü–û –ú–û–©–ù–û–°–¢–ò (–≤–≤–æ–¥ –º–æ—â–Ω–æ—Å—Ç–∏)"""
def find_by_power_first_step(message):
    global kw
    kw = message.text
    if kw.replace('.','',1).isdigit():
        msg = bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å—Ç–∞—Ç—É—Å', reply_markup = keyboards.kb_search_by_status())
        bot.register_next_step_handler(msg, find_by_power_second_step)
    else:
        if message.text == 'üîô –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, text='–ù–∞–∑–∞–¥', reply_markup = keyboards.kb_main_menu())
        else:
            msg = bot.send_message(message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏!')
            bot.register_next_step_handler(msg, find_by_power_first_step)


#  """–§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê –î–í–ò–ì–ê–¢–ï–õ–ï–ô –ü–û –ú–û–©–ù–û–°–¢–ò (–≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞)"""
def find_by_power_second_step(message):
    global status
    if message.text == '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ':
        status = 5
    elif message.text == '–í —Ä–µ–∑–µ—Ä–≤–µ':
        status = 1
    elif message.text == '–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ':
        status = 10
    elif message.text == '–°–ø–∏—Å–∞–Ω–Ω—ã–µ':
        status = 6
    elif message.text == '–í—Å–µ':
        status = '*'
    else:
        status = 0

    find_by_power_final_step(message)


#  """–§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê –î–í–ò–ì–ê–¢–ï–õ–ï–ô –ü–û –ú–û–©–ù–û–°–¢–ò (–≤—ã–≤–æ–¥ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º)"""
def find_by_power_final_step(message):
    if status != 0:
        vehicle_list = cfg.get_vehicle_by_power(kw, status)
        if len(vehicle_list[0][0]) < 100 or vehicle_list is not None: # –¢–æ –∂–µ, —á—Ç–æ –∏ –≤ find_by_number()
            bot.send_message(message.chat.id, text=f'–°–ø–∏—Å–æ–∫ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –º–æ—â–Ω–æ—Å—Ç—å—é {kw} –∫–í—Ç:', reply_markup = keyboards.kb_main_menu())
            for vehicle in vehicle_list:
                # open(f'{path.join(path.dirname(__file__), f'{cfg.get_image(vehicle[5])}')}', 'rb') - –¥–ª—è localhost
                bot.send_photo(message.chat.id,
                               photo=open(f'{cfg.get_image(vehicle[5])}', 'rb'),
                               caption=f'<b>–ò–Ω–≤. ‚Ññ: <u> F-{vehicle[0]} </u>\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <u> {vehicle[1]} </u>\n–ú–æ—â–Ω–æ—Å—Ç—å: <u> {vehicle[2]}–∫–í—Ç </u>\n–í–æ–ª—å—Ç–∞–∂: <u> {vehicle[3]}–í </u>\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: <u> {vehicle[4]} </u>\n–°—Ç–∞—Ç—É—Å: <u> {vehicle[5]} </u></b>',
                               reply_markup = keyboards.ikb_vehicle())
        else: 
            bot.send_message(message.chat.id, text='–ù–µ—Ç –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!', reply_markup = keyboards.kb_main_menu())
    else:
        msg = bot.send_message(message.chat.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –∏–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã')
        bot.register_next_step_handler(msg, find_by_power_second_step)


#  """–ö–û–õ–õ–ë–ï–ö–ò –ù–ê –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –î–í–ò–ì–ê–¢–ï–õ–Ø"""
@bot.callback_query_handler(func = lambda call: True)
def change_status(call):
    if call.data == 'mainmenu':
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = keyboards.ikb_vehicle())

    if call.data == 'change_status':
        if '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' not in call.message.caption:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = keyboards.vehicle_status_change(0))
        else:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = keyboards.vehicle_status_change(1))

    if call.data == 'get_more':
        if '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' in call.message.caption:
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup = keyboards.ikb_vehicle())
        else:
            get_more(call, call.message.message_id, call.message.caption)

    for id in users:
        if str(call.message.chat.id) == id:
            if users[id]['status'] == 'online':
                if call.data == 'take_place':
                    inv_num = call.message.caption.split()[2][2:]
                    cfg.change_status(inv_num, 5)
                    cfg.insert_history_status(inv_num, call.message.chat.id, 5, 1)
                    bot.send_message(call.message.chat.id, text=f'<b>–î–≤–∏–≥–∞—Ç–µ–ª—å <u> F-{inv_num} </u>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å <u> "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" </u></b>')

                if call.data == 'repair':
                    inv_num = call.message.caption.split()[2][2:]
                    cfg.change_status(inv_num, 10)
                    cfg.insert_history_status(inv_num, call.message.chat.id, 10, 1)
                    bot.send_message(call.message.chat.id, text=f'<b>–î–≤–∏–≥–∞—Ç–µ–ª—å <u> F-{inv_num} </u>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å <u> "–ù–∞ —Ä–µ–º–æ–Ω—Ç–µ" </u></b>')

                if call.data == 'reserve':
                    inv_num = call.message.caption.split()[2][2:]
                    cfg.change_status(inv_num, 1)
                    cfg.insert_history_status(inv_num, call.message.chat.id, 1, 1)
                    bot.send_message(call.message.chat.id, text=f'<b>–î–≤–∏–≥–∞—Ç–µ–ª—å <u> F-{inv_num} </u>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å <u> "–í —Ä–µ–∑–µ—Ä–≤–µ" </u></b>')

                if call.data == 'off':
                    inv_num = call.message.caption.split()[2][2:]
                    cfg.change_status(inv_num, 6)
                    cfg.insert_history_status(inv_num, call.message.chat.id, 6, 1)
                    bot.send_message(call.message.chat.id, text=f'<b>–î–≤–∏–≥–∞—Ç–µ–ª—å <u> F-{inv_num} </u>\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å <u> "–°–ø–∏—Å–∞–Ω" </u></b>')
            else: 
                    bot.send_message(call.message.chat.id, text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!\n\n–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ')


#  """–§–£–ù–ö–¶–ò–Ø –†–ï–ê–ì–ò–†–£–Æ–©–ê–Ø –ù–ê –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò –ü–û–î–†–û–ë–ù–ï–ï"""
def get_more(call, message_id, old_text):
    url = 'https://google.kz'
    more = f'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {url}\nComing soon...'

    markup = types.InlineKeyboardMarkup()
    status_btn = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data='change_status')
    markup.add(status_btn)

    # open(f'{path.join(path.dirname(__file__), './img/engine1.jpg')}', "rb") - –¥–ª—è localhost
    media = types.InputMediaPhoto(open(f"{cfg.get_image('any_status')}", "rb"), caption=old_text + '\n' + more)
    bot.edit_message_media(media , call.message.chat.id, message_id, reply_markup = markup)


#  """–§–£–ù–ö–¶–ò–Ø –û–ü–û–í–ï–©–ï–ù–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í –û–ë –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•"""
def notify_admin(txt=''):
    print(f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} –ë–û–¢ –ó–ê–ü–£–©–ï–ù")

    while True:
        admin_list = cfg.get_admins()
        txt = cfg.notification_message()
        if txt[0][0].startswith('<br') or txt is None: # –ü—É—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
            pass
        else:
            print(re.sub(r'<[^>]*>', '', txt[0][0]).replace('\n', ' ')) # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            pass
            
            for admin in admin_list:
                try:
                    for m in txt:
                        bot.send_message(admin[4], text=m[0])
                except:
                    print(
                        f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} ERROR: {admin[1]} {admin[2]} –Ω–µ –æ–ø–æ–≤–µ—â–µ–Ω. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω chat_id –≤ —Ç–∞–±–ª–∏—Ü–µ log_auth_var")

                    continue

        check_and_disconnect_inactive_users()
        time.sleep(15) # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π/–∏–∑–º–µ–Ω–µ–Ω–∏–π


#  """–§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ù–ï–ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô"""
def check_and_disconnect_inactive_users():
    current_time = datetime.now().time()

    for user, activity in users.items():
        if activity['status'] == 'online':
            last_activity_time = activity['last_activity_time']
            time_difference = datetime.combine(datetime.today(), current_time) - datetime.combine(datetime.today(), last_activity_time)
            if time_difference > inactive_timeout:
                activity['status'] = 'offline'
                print(f"{datetime.now().date()} | {datetime.now().strftime('%H:%M:%S')} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")


#  """–§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–û–°–õ–ï–î–ù–ï–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"""
def update_user_activity(user):
    users[user]['last_activity_time'] = datetime.now().time()


if __name__ == '__main__':
    t1 = threading.Thread(target=bot.infinity_polling)
    t2 = threading.Thread(target=notify_admin)
    t1.start()
    t2.start()
    t1.join()
    t2.join()